version: '3'

tasks:

  ##############################################
  # Module support
  ##############################################
  update:
    desc: Update the project dependencies
    cmds:
      - echo "Updating dependencies..."
      - go get -u ./...
      - go mod tidy
      - echo "Dependencies updated"
    silent: true

  ##############################################
  # App support
  ##############################################
  server:
    desc: Run the Go server
    deps:
      - proto
    cmds:
      - go run ./cmd/grpcapi/server.go
      - echo "Server started successfully"  
    silent: false

  ##############################################
  # Clean up proto gen files
  ##############################################
  clean:
    desc: Clean up the proto generation files
    cmds:
      - rm -rf ./proto/gen
      - echo "Proto generation files cleaned up" 
    silent: true

  ##############################################
  # Generate proto files
  ##############################################
  proto:
    desc: Generate Go code from Protobuf files
    cmds:
      - protoc -I=proto --go_out=. --go-grpc_out=. proto/*.proto
      - echo "Protobuf files generated"
    silent: true

  ##############################################
  # Compose up
  ##############################################
  compose:
    desc: Run a Docker Compose command
    cmds:
      - docker compose up -d --force-recreate
      - echo "Docker Compose started"
    silent: true

  ##############################################
  # Open Mongosh command in docker
  ##############################################
  mongosh:
    desc: Run a MongoDB shell command in docker
    cmds:
      - docker exec -it mongodb  mongosh
    silent: false

  ##############################################
  # Load Sample Data
  ##############################################
  loaddata:
    desc: Reset and load sample data into MongoDB
    cmds:
      - |
        echo "Suppression de la base de données school..."
        docker exec -it mongodb mongosh --eval "use school; db.dropDatabase();"
        
        echo "Création du répertoire temporaire dans le conteneur..."
        docker exec -it mongodb mkdir -p /tmp/json
        
        echo "Copie des fichiers JSON dans le conteneur..."
        docker cp ./json/execsdata.json mongodb:/tmp/json/
        docker cp ./json/studentsdata.json mongodb:/tmp/json/
        docker cp ./json/teachersdata.json mongodb:/tmp/json/
        
        echo "Importation des données execs..."
        docker exec -it mongodb mongoimport --db school --collection execs --file /tmp/json/execsdata.json --jsonArray
        echo "Importation des données students..."
        docker exec -it mongodb mongoimport --db school --collection students --file /tmp/json/studentsdata.json --jsonArray
        echo "Importation des données teachers..."
        docker exec -it mongodb mongoimport --db school --collection teachers --file /tmp/json/teachersdata.json --jsonArray
        
        echo "Nettoyage des fichiers temporaires..."
        docker exec -it mongodb rm -rf /tmp/json
        
        echo "Import terminé avec succès!"
    silent: true

  # coucou:
  #   desc: Stocke les valeurs passées en ligne de commande (nom et prénom)
  #   cmds:
  #     - |
  #       # Récupérer les arguments
  #       ARGS="{{.CLI_ARGS}}"
  #       # Extraire le premier mot comme nom
  #       NOM=$(echo $ARGS | cut -d' ' -f1)
  #       # Extraire le deuxième mot comme prénom
  #       PRENOM=$(echo $ARGS | cut -d' ' -f2)
  #       # Afficher les résultats
  #       echo "Bonjour $PRENOM $NOM !"
  #       echo "Nom: $NOM"
  #       echo "Prénom: $PRENOM"
  #   silent: false
